{"version":3,"sources":["app.js","index.js","lib.js"],"names":["Main","react_default","a","createElement","app_Board","React","Component","Cell","props","cls","aliveCells","includes","id","onClick","className","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","timerId","e","setState","concat","parseInt","target","rows","column","cells","row","push","key","createAliveCells","bind","_this2","setInterval","map","x","nextGen","produceNextGenAliveCells","clearInterval","createBoard","startCellularAutomation","stopCellularAutomation","ReactDOM","render","app","document","getElementById","filterNeighbours","length","width","inputArray","initValue","totalArray","Array","fill","filter","getNeighboursFirstColumn","position","neighbours","getNeighboursLastColumn","getNeighboursMiddleColumn","getAllNeighbours","getLiveNeighboursLength","aliveArray","module","exports","deadCells","aliveNeighbourLength"],"mappings":"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","file":"static/js/main.80cf9e62.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./main.css\";\nimport { produceNextGenAliveCells } from \"./lib\";\n\nconst HEIGHT = 20;\nconst WIDTH = 20;\n\nclass Main extends React.Component {\n  render() {\n    return <Board />;\n  }\n}\n\nfunction Cell(props) {\n  let cls = \"\";\n  if (props.aliveCells.includes(props.id)) cls = \"alive\";\n  return <td onClick={props.onClick} id={props.id} className={cls} />;\n}\n\nclass Board extends React.Component {\n\n\tconstructor(props) {\n    super(props);\n    this.state = {\n      aliveCells: []\n\t\t};\n\t\tthis.timerId = ()=>{};\n  }\n  createAliveCells(e) {\n    this.setState({\n      aliveCells: this.state.aliveCells.concat(parseInt(e.target.id))\n    });\n  }\n\n  createBoard() {\n    let id = 1;\n    let rows = [];\n\n    for (let column = 0; column < HEIGHT; column++) {\n      let cells = [];\n      for (let row = 0; row < WIDTH; row++) {\n        cells.push(\n          <Cell\n            key={row}\n            onClick={this.createAliveCells.bind(this)}\n            id={id++}\n            aliveCells={this.state.aliveCells}\n          />\n        );\n      }\n      rows.push(\n        <tr key={column} className=\"board-row\">\n          {cells}\n        </tr>\n      );\n    }\n    return rows;\n  }\n\n  startCellularAutomation() {\n    this.timerId = setInterval(() => {\n      const aliveCells = this.state.aliveCells.map(x => +x);\n      const nextGen = produceNextGenAliveCells(HEIGHT, WIDTH, aliveCells);\n      this.setState({ aliveCells: nextGen });\n    }, 500);\n  }\n\n  stopCellularAutomation() {\n    clearInterval(this.timerId);\n  }\n\n  render() {\n    return (\n      <div className=\"board-and-buttob-area\">\n        <table>\n          <tbody>{this.createBoard()}</tbody>\n        </table>\n        <div>\n          <button onClick={this.startCellularAutomation.bind(this)}>\n            Start\n          </button>\n          <button onClick={this.stopCellularAutomation.bind(this)}>Stop</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Main from './app';\n\nReactDOM.render(<Main />, document.getElementById('root'));","const filterNeighbours = function(length, width, inputArray) {\n  let initValue = 1;\n  let totalArray = new Array(length * width).fill(0).map(x => initValue++);\n  return inputArray.filter(x => totalArray.includes(x));\n};\n\nconst getNeighboursFirstColumn = function(length, width, position) {\n  let neighbours = new Array(0).concat(\n    position + 1,\n    position + length,\n    position - length,\n    position + length + 1,\n    position - length + 1\n  );\n  return filterNeighbours(length, width, neighbours);\n};\n\nconst getNeighboursLastColumn = function(length, width, position) {\n  let neighbours = new Array(0).concat(\n    position - 1,\n    position + length,\n    position - length,\n    position + length - 1,\n    position - length - 1\n  );\n  return filterNeighbours(length, width, neighbours);\n};\n\nconst getNeighboursMiddleColumn = function(length, width, position) {\n  let neighbours = new Array(0).concat(\n    position + 1,\n    position - 1,\n    position + length,\n    position - length,\n    position + length + 1,\n    position + length - 1,\n    position - length + 1,\n    position - length - 1\n  );\n  return filterNeighbours(length, width, neighbours);\n};\n\nconst getAllNeighbours = function(length, width, position) {\n  if ((position - 1) % length === 0)\n    return getNeighboursFirstColumn(length, width, position);\n  if (position % length === 0)\n    return getNeighboursLastColumn(length, width, position);\n  return getNeighboursMiddleColumn(length, width, position);\n};\n\nconst getLiveNeighboursLength = function(aliveArray, length, width, position) {\n  let allNeighbourArray = getAllNeighbours(length, width, position);\n  return allNeighbourArray.filter(x => aliveArray.includes(x)).length;\n};\n\nconst produceNextGenAliveCells = function(length, width, aliveArray) {\n  let initValue = 1;\n  let deadCells = new Array(length * width)\n    .fill(0)\n    .map(x => initValue++)\n    .filter(x => !aliveArray.includes(x));\n\n  const aliveNeighbourLength = getLiveNeighboursLength.bind(\n    null,\n    aliveArray,\n    length,\n    width\n  );\n\n  let aliveCells = aliveArray.filter(\n    x => aliveNeighbourLength(x) === 2 || aliveNeighbourLength(x) === 3\n  );\n  return aliveCells.concat(deadCells.filter(x => aliveNeighbourLength(x) === 3));\n};\n\nmodule.exports = {\n  produceNextGenAliveCells,\n  filterNeighbours,\n  getNeighboursFirstColumn,\n  getNeighboursMiddleColumn,\n  getNeighboursLastColumn,\n  getAllNeighbours,\n  getLiveNeighboursLength\n};"],"sourceRoot":""}